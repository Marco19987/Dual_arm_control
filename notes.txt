
# PERCEPTION RUNNING

RUN MULTIPLE realsense
ros2 launch realsense2_camera rs_launch.py  camera_namespace:="camera_2" usb_port_id:='2-10.1'
ros2 launch realsense2_camera rs_launch.py camera_namespace:="camera_1" usb_port_id:='1-4'

The launch files provided by realsense ros2 driver for multiple cameras doesn't work with automatic serial_no identification (i don't know why).
To overcame this, the specific usb_port_id onto the camera is connected has to be scpecified. 

the launch file in two_realsense.launch.py launch the realsense cameras specifying the usb_port_id; 
ros2 launch dual_arm_control two_realsense.launch.py --show-args

(the following launch file run cameras, aruco detectors and pose conversion servers)
ros2 launch dual_arm_control aruco_detection.launch.py 


# run ARUCO DETECTION Servers
ros2 run uclv_aruco_detection test_server_client  --ros-args -r __ns:=/camera_1
ros2 run uclv_aruco_detection test_server_client  --ros-args -r __ns:=/camera_2

# EKF Server
ros2 run dual_arm_control ekf_server --ros-args -p  robot_1_prefix:="camera_1" -p robot_2_prefix:="camera_2" -p base_frame_name:="camera_1_color_optical_frame" -p alpha_occlusion:=1.5 -p saturation_occlusion:=15.0
ros2 run dual_arm_control ekf_server --ros-args -p  robot_1_prefix:="robot1" -p robot_2_prefix:="robot2" -p base_frame_name:="robot1_color_optical_frame" -p alpha_occlusion:=1.5 -p saturation_occlusion:=15.0 -p covariance_state_diagonal:=[0.01,0.1,0.0000001,0.00001,0.01,0.01] -p covariance_measure_diagonal:=[0.001,0.001,0.001,0.001,0.001,0.001,0.001]

ros2 run dual_arm_control test_ekf_client


ros2 run dual_arm_control ekf_server --ros-args -p  robot_1_prefix:="robot1" -p robot_2_prefix:="robot2" -p base_frame_name:="world" -p alpha_occlusion:=1.15 -p saturation_occlusion:=15.0 -p covariance_state_diagonal:=[0.000001,0.0000001,0.00000001,0.000000001,0.0000000001,0.00000000000001] -p covariance_measure_diagonal:=[0.0000001,0.0000001,0.0000001,0.000000001,0.0000000001,0.000000001,0.000000001]



# TF STATIC CAMERA TRANSFORMS PUBLISHER (for debug)
ros2 launch dual_arm_control launch_static_camera_transform.launch.py 





# util commands
 ros2 run uclv_robot_ros goto 8 /robot1/joint_states 1.57 0 0 0 0 0 0 0 10 --ros-args -r __ns:=/robot1

ros2 run uclv_robot_ros fkine --ros-args -p robot_library_name:=dual_arm_control -p robot_plugin_name:=uclv::robot::MotomanSIA5FExt -p publish_jacobian:=true -r  __ns:=/robot2


# pivoting joint
the pivoting joint has been added in src/robots/*, modify the last robot joint 
with the real position of the end effector, for the moment it is 0.20 cm


# When container suddenly closed 
If the message [RTPS_TRANSPORT_SHM Error] Failed init_port fastrtps_port9411: open_and_lock_file failed -> Function open_port_internal
appears, go to /dev/shm and remove manually the file fastrtps_port9411

DO NOT FORGET
1. SET real joint limits in two_robots.launch
2. SET real end effector (in robots folder cpp)
3. SET real camera transforms wrt robots ee before pivoting
4. Control rates nodes
5. control parameters in demo node
6. set secondary task configurations



TO DO 
1. fix post grasp pose [DONE]
2. rotate poses camera to robot base frames [DONE]
3. docker container tactile + wsg + slipping/pivoting (bridge) [DONE]
4. container yaskawa [Done]
5. test object and force control [DONE - seems to work]
6. check joints limit clik (checkHardJointLimits)
7. add internal motion [DONE]
8. implement joint state mux/demux [DONE]
9. set b1Tb2 parameter to cooperative robot [DONE]
10. find a way to run cooperative movement with or without object control without change remap in launch [DONE]
11. remove torsional moment in the pivoting joint axis in internal force control add as parameter
12. add ICP for point cloud refinement 
13. modify covariance EKF with sample time
14. check b1Tb2 estimation stop [DONE]
15. iiwa launch file 
16. call slipping control from deom node
17. activate/deactivate force measure in ekf only after grasp



# REMEMBER TO EXPORT THE SAME ROS DOMAIN ID IN ALL THE CONTAINERS AND THE HOST 
export ROS_DOMAIN_ID=32

# ROBOT IIWA launch
1. ssh robolab@192.168.2.91
2. ros2 launch iiwa_bringup_dual_arm.launch.py

# ROBOT SIA5F launch
1. create container yaskawa following instructions at uclv_docker_setup
2. Open 2 terminals in the container:
    2.1 uclv_docker_setup/yaskawa_setup ./yaskawa_bringup.sh roscore
    2.3 uclv_docker_setup/yaskawa_setup ./yaskawa_bringup.sh roslaunch sun_yaskawa_nodes bringup_motoman.launch

# ROS BRIDGE CONTAINER 
Create the image starting from the DockerFile in uclv_docker_setup/bridge_setup
1. uclv_docker_setup/bridge_setup ./bridge_bringup.sh

# SLIPPING CONTROL CONTAINER (in three terminals)
Create the image starting from the DockerFile in uclv_docker_setup/slipping_control_setup
1. docker start slipping_control
2. docker exec -it slipping_control bash
3. roslaunch dual_arm_slipping_launch bringup_yaskawa_slipping_control.launch 
4. roslaunch dual_arm_slipping_launch bringup_iiwa_slipping_control.launch 
5. roslaunch dual_arm_slipping_launch  bringup_dummy_slipping_bridge.launch


# WSG ONLINE INTERFACE
run the cmd_vel_out script for both wsg

# TACTILE PORTS
 /dev/ttyUSB0 -> iiwa right finger -> #F401
 /dev/ttyUSB1 -> iiwa left finger -> #F402
 /dev/ttyUSB5 -> yaskawa left finger (red cable) -> #F408
 /dev/ttyUSB3 -> yaskawa right finger (black cable) -> #F407

 # RUNNING DUAL ARM CONTROL (in different terminals)
 1. ros2 launch dual_arm_control two_robots.launnch.py (in this launch there is the simulation parameter to set to true or false)
 2. ros2 launch dual_arm_control aruco_detection.launch.py 
 3. ros2 launch dual_arm_control bringup_ekf_server.launch.py
 4. ros2 launch dual_arm_control launch_static_camera_transform.launch (tf publisher to visualize estimated transform between robots)
 5. ros2 run dual_arm_control demo_node true true true true (the input parameters are described in the demo_node)